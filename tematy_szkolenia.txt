0. trochę o pythonie
-interpretowany
-alternatywne implementacje
-zen of python
-sys
-składnia:
--nie ma ;
--wcięcia
--komentarze -_ w interpreterze

1. pip
-pip search
-pip show
-pip install

2. virtualenv
-virtualenv
-virtualenvwrapper

3. zmienne i typy
-dynamiczne i silne typowanie
-definiowanie zmiennych
-referencje:
--del - usuwa nazwę
-typy modyfikowalne/niemodyfikowalne
-inspekcja - dir, vars
-dokumentacja __doc__
-zmienne:
--słownik
--krotka
--lista, rozpakowywanie
--string/unicode/raw:
---wieloliniowe
---format
--int/float
--zbiór/frozenset
--range/xrange
--wartości logiczne:
---False, [], '', {}, set(), (), 0, None
--operatory:
---**, *, /, //, %, +,-, ~, <<, >>, &, |, ^
---<,>, <=, >=, !=, is, in
---and, or, not
-copy/deepcopy

4. pętle i sterowanie przepływem
-if, elif, else
-for, else - comprehensions
-while, else

5. funkcje
-pisanie funkcji
-argumenty domyślne - triki z mutowalnymi
-call by sharing + zmienne globalne
-dokstringi
-lambdy -
-argumenty pozycyjne i słowa kluczowe
-generatory + COMPREHENSIONS!!!
-late binding
-domknięcia/free variables
-funkcje wyższych rzędów + map, filter
-dekoratory

5.5 Wyjątki
- try, except, finally, else
-raise

6. moduły
-import, from module import ...
-pakiety
-reload
-globals
-locals
-pomocne moduły:
--functools
--itertools
--collections
--operator
-sys.path


7. Obiekty i klasy
-wszystko jest obiektem, ducktyping
-new/old style classes
-atrybuty + name mangling
- __dict__/__slots__
-metody
-monkeypatching:
--dodawanie metod po definicji klasy
-magiczne metody:
--konstrukcja i inicjalizacja:
---__new__
---__init__
--reprezentacja słowna:
---__repr__, __str__, __unicode__, __format__ (fmt_spec)
--rzutowanie:
---__int__, __float__, __str__, __unicode__, __iter__
--przeciążanie operatorów:
---__div__ itp
--- __neg__, __pos__, __invert__, __abs__, __le__, lt, ge, gt
--- iadd, itp
---__call__
---__getitem__/__setitem__
--dostęp do atrybutów:
---__getattribute__/__getattr__/__setattr__/__delattr__
--__hash__
--sekwencje:
---__len__
---__getitem__ - liczba/slice
--iterowanie:
---obiekt iterowalny:
----__iter__ - nie mozna zwrocic listy ani krotki, najlepiej iter(lista) albo 
----__getitem__ + indeksy
---iterator:
----__iter__
---__next__/next
--__contains__
--__missing__
-NotImplemented/NotImplementedError
-class Attributes
-classmethods
-staticmethods
-property i deskryptory
-dziedziczenie/ wielodziedziczenie/ __mro__/ super()
-menedżery kontekstu, __exit__ zwraca True jak ok a False jak reraise


8. I/O


9. testowanie
-unittest
-mock
-patch

10. przydatne rzeczy:
- enumerate
- castowanie False/True na int
- zip - byl
- sum
- metody słowników, list itp
- regexp
- getattr
- reversed
- metody słownika/listy


# wpadki:
tuple((1,2,3,4,5))
[[]] * 5
{True:'a', 1:'b', 1.0:'c'}

co jeszcze trzeba:

    Usystematyzowanie podstawowej wiedzy
        funkcje i programowanie funkcyjne
        częste pułapki.
    Przetwarzanie danych
        obsługa XML
        JSON.
    Komunikacja między-procesowa (IPC)
        zarządzanie procesami
        obsługa sygnałów
        komunikacja strumieniowa.
    Programowanie wielowątkowe
        wprowadzenie do wątków
        obsługa wątków
        synchronizacja
        Global Intepreter Lock
        przegląd dalszych możliwości.
    Debugowanie aplikacji
        podstawowe techniki
        moduł pdb
        elementy zaawansowane.
    Baza danych
        ważne aspekty przy programowaniu baz danych.
    Optymalizacja wydajności programów (opcjonalnie jak starczy czasu)
        efektywne wykorzystanie obiektów wbudowanych
        optymalizacja interpretera Python
        profilowanie i identyfikacja "wąskich gardeł"
        magiczne sztuczki i co dalej?
        
+ linting
